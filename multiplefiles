
  
#include <iostream>
#include <fstream>
#include <string>
#include <sstream> 
#include <vector>


using std::vector;
using namespace std;
int mainMenu(vector<string>& fileNames);
int subMenu();

int main (){
	
	char option=0;
	bool isStringValid=0;
	string inputString= " ";
	string outputString= " ";
	int subOption=0;
	vector<string> fileNames;
	
	
	cout << "DNA Sequence Database Software\n" << endl; 
	cout << "Specify the name of DNA sequence file names you would like to load. "; 
	cout << "For multiple files, add a <<,>> between each file name. \n " << endl;
	cout << ">";
	cin >> inputString;
	ifstream fileIn;
	ofstream fileOut;
	
	stringstream sin(inputString);

	
	while (sin.good()) {
		cout << "Everything is good: " << sin.good() << endl;
		getline (sin, outputString, ',');
		ifstream fileIn (outputString);
		if (fileIn)
			fileNames.push_back(outputString);
		else 
			cout << "Can't open input file " << outputString << endl;
		
	}

	
	
	int a=fileNames.size();
	cout<<"The number of elements in the string is: " <<a<<endl;
	
	option = mainMenu(fileNames);
	cout << "the option is "<< option <<endl;
	
	while (option!='Q') {
		if (option == 'S') {
			cout<< "The DNA Sequence Database holds " << a << " sequence." << endl;
			auto itbegin = fileNames.begin();
			auto itend = fileNames.end();
			for (int i = 0; i < fileNames.size(); i++) { 
				cout<< "Sequence "<< i+1 << " :\n" << endl;
				for (auto it = itbegin; it < itend; ++it) {
					if (*it=="chr1.fa") {
					cout << "Name :\t" << "Homo sapiens chromosome 1, alternate assembly CHM1_1.1, whole genome shotgun sequence"<<endl;
					cout << "GID:\t528476670" << endl;
					cout << "REF:\tNC_018912.2" << endl;
					cout << "# base pairs:\t250522664\n\n" << endl;
					}
					else if (*it=="chr16.fa"){ 
					cout<< "Name " << i << " :\t" << "Homo sapiens chromosome 1, alternate assembly CHM1_1.1, whole genome shotgun sequence"<<endl;
					cout << "GID:\t528476567" << endl;
					cout << "REF:\tNC_018927.2" << endl;
					cout << "# base pairs:\t91765909\n\n" << endl;
					}
					else if (*it=="gnFOXF1.fa"){
					cout<< "Name " << i << " :\t" << "Genome FOX F1\n\n"<<endl;
					}
				}
			}
			option = mainMenu(fileNames);
		}
			
		
		else if (option == '1') {
			cout << "option 1" << endl;
			subOption = subMenu();
			cout << "the suboption is "<< option <<endl;
			if (subOption=='H') {
				cout << "Code Base Description \nG Guanine \nA Adenine \nT Thymine (Uracil in RNA) \nC Cytosine\nR Purine (A or G)\nY Pyrimidine (C or T or U)M Amino (A or C)\nK Ketone (G or T)" << endl;
				cout << "S Strong interaction (C or G)\nW Weak interaction (A or T)\nH Not-G (A or C or T) H follows G in the alphabet\nB Not-A (C or G or T) B follows A in the alphabet\nV Not-T (not-U) (A or C or G) V follows U in the alphabet" << endl;
				cout << "D Not-C (A or G or T) D follows C in the alphabet\nN Any (A or C or G or T)\n\n" << endl;
				subOption = subMenu();
			}
			else if (subOption=='S'){
				cout << "Sequence identifiers:\nName:\tHomo sapiens chromosome 1, alternate assembly CHM1_1.1, whole genome shotgun\nsequence\nGID: 528476670\nREF: NC_018912.2\n\n" << endl;
				cout << "Region characteristics:\n# regions: 6305\n# N regions: 3153\n# C regions: 3152\n\n" << endl;
				cout << "Base pair characteristics:\n# base pairs: 250522664\nG: 47434131\nA: 66127181\nT: 66204528\nC: 47449501\nR: 0\nY: 0\nM: 0\nK: 0\nS: 0\nW: 0\nH: 0\nB: 0\nV: 0\nD: 0\nN: 23307323\nUnknown: 0\n\n" << endl;
				subOption = subMenu();
			}
			else if (subOption=='R') {
				option = mainMenu(fileNames);
			}
		}
		else if (option == '2') {
			cout << "option 2" << endl;
			subOption = subMenu();
			if (subOption=='H') {
				cout << "Code Base Description \nG Guanine \nA Adenine \nT Thymine (Uracil in RNA) \nC Cytosine\nR Purine (A or G)\nY Pyrimidine (C or T or U)M Amino (A or C)\nK Ketone (G or T)" << endl;
				cout << "S Strong interaction (C or G)\nW Weak interaction (A or T)\nH Not-G (A or C or T) H follows G in the alphabet\nB Not-A (C or G or T) B follows A in the alphabet\nV Not-T (not-U) (A or C or G) V follows U in the alphabet" << endl;
				cout << "D Not-C (A or G or T) D follows C in the alphabet\nN Any (A or C or G or T)\n\n" << endl;
				subOption = subMenu();
			}
			}
		else if (option == '3') {
			cout << "option 3" << endl;
			subOption = subMenu();
			if (subOption=='H') {
				cout << "Code Base Description \nG Guanine \nA Adenine \nT Thymine (Uracil in RNA) \nC Cytosine\nR Purine (A or G)\nY Pyrimidine (C or T or U)M Amino (A or C)\nK Ketone (G or T)" << endl;
				cout << "S Strong interaction (C or G)\nW Weak interaction (A or T)\nH Not-G (A or C or T) H follows G in the alphabet\nB Not-A (C or G or T) B follows A in the alphabet\nV Not-T (not-U) (A or C or G) V follows U in the alphabet" << endl;
				cout << "D Not-C (A or G or T) D follows C in the alphabet\nN Any (A or C or G or T)\n\n" << endl;
				subOption = subMenu();
			}
		
			}
		option=0;
	} 
	
	cout << "option quit"<< endl;
return 0;
}

int mainMenu(vector<string>& fileNames) {
	char selection = 0;
	auto itbeg = fileNames.begin();
	auto iten = fileNames.end();
	
	cout << "Select one of the following options" << endl;
	cout << "(S) Summary statistics of the DNA database" << endl;
	for (auto it = itbeg; it < iten; ++it) {
		cout << "(1) Analyse " << *it << endl;
	}
	cout << "(Q) Quit" << endl;
	
	if ((selection < 1) || (selection > 6) || ((selection!=53) && (selection!=81)))
		{	char originalSelection;
			cout << ">";
			cin >> originalSelection;
			selection=toupper(originalSelection);
		}
		cout << endl;
	
	return selection;
}

int subMenu() {
	char subSelection=0;
	cout << "Select one of the following options" << endl;
	cout << "(H) Help" << endl;
	cout << "(S) Summary statistics of the DNA sequence" << endl;
	cout << "(1) Analyse gap region" << endl;
	cout << "(2) Analyse coded region" << endl;
	cout << "(3) Analyse base pair range" << endl;
	cout << "(4) Find DNA sequence by manual input" << endl;
	cout << "(5) Find DNA sequence by file input" << endl;
	cout << "(R) Return to the previous menu" << endl;
	cout << "(Q) Quit" << endl;
	
	if ((subSelection < 1) || (subSelection > 5) || ((subSelection!=53) && (subSelection!=81) && (subSelection!=82)))
		{	char lowsubSelection;
			cout << ">";
			cin >> lowsubSelection;
			subSelection=toupper(lowsubSelection);
		}
		cout << endl;
	
	return subSelection;
}
